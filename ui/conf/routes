# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Map static resources from the /public folder to the /assets URL path

# Javascript Router
GET		/assets/javascripts/routes							controllers.Application.jsRoutes()

GET     /assets/*file               						controllers.Assets.at(path="/public", file)
GET     /webjars/*file                  					controllers.WebJarAssets.at(file)

# Authentication Callback
GET		/callback											@org.pac4j.play.CallbackController.callback()
POST	/callback											@org.pac4j.play.CallbackController.callback()

# Global error(for user)
GET		/error												controllers.Application.error()

# Login
GET		/login												controllers.Application.login(repoId ?= "bedroom")
GET		/repo/:repoId/login									controllers.Application.login(repoId)
#POST	/repo/:repoId/authenticate							controllers.Application.authenticate(repoId)
GET		/repo/:repoId/logout								controllers.Application.logout(repoId)

# Home page
GET     /repo/:repoId/                           			controllers.Node.index(repoId:String)
GET     /repo/:repoId/:id                           		controllers.Node.direct(repoId:String, id:String, activateTabName:String ?= "property")

# CMIS Rest API
GET     /repo/:repoId/objects               				controllers.Node.showChildren(repoId:String, id="/")
GET		/repo/:repoId/objects/children-by-path				controllers.Node.showChildrenByPath(repoId:String, path:String ?= "/")
GET     /repo/:repoId/objects/search               			controllers.Node.search(repoId:String, term:String ?= "")
GET     /repo/:repoId/objects/new               			controllers.Node.showBlank(repoId:String)
POST	/repo/:repoId/objects/create               			controllers.Node.create(repoId:String)
POST    /repo/:repoId/objects/drag-and-drop          		controllers.Node.dragAndDrop(repoId:String, action:String ?= "")
GET     /repo/:repoId/objects/:id               			controllers.Node.showDetail(repoId:String, id:String, activateTabName:String ?= "property")
GET     /repo/:repoId/objects/:id/property           		controllers.Node.showProperty(repoId:String, id:String)
GET     /repo/:repoId/objects/:id/download           		controllers.Node.download(repoId:String, id:String)
GET     /repo/:repoId/objects/:id/file               		controllers.Node.showFile(repoId:String, id:String)
GET     /repo/:repoId/objects/:id/preview            		controllers.Node.showPreview(repoId:String, id:String)
GET     /repo/:repoId/objects/:id/download-preview   		controllers.Node.downloadPreview(repoId:String, id:String)
GET     /repo/:repoId/objects/:id/version            		controllers.Node.showVersion(repoId:String, id:String)
GET		/repo/:repoId/objects/:id/permission				controllers.Node.showPermission(repoId:String, id:String)
GET		/repo/:repoId/objects/:id/permission/:principalId	controllers.Node.getAce(repoId:String, id:String, principalId:String)

GET		/repo/:repoId/objects/:id/relationship				controllers.Node.showRelationship(repoId:String, id:String)
GET		/repo/:repoId/objects/:id/relationship/create				controllers.Node.showRelationshipCreate(repoId:String, id:String)
POST	/repo/:repoId/objects/:sourceId/relationship/create-to-new     controllers.Node.createRelationToNew(repoId:String, sourceId:String)
POST	/repo/:repoId/objects/:sourceId/relationship/create-to-exist       controllers.Node.createRelationToExisting(repoId:String, sourceId:String)

GET		/repo/:repoId/objects/:id/action/:actionId			controllers.Node.showAction(repoId:String, id:String, actionId:String)
POST	/repo/:repoId/objects/:id/action/execute			controllers.Node.doAction(repoId:String, id:String, actionId:String)

GET     /repo/:repoId/objects/:id/children           		controllers.Node.showChildren(repoId:String, id:String)
POST    /repo/:repoId/objects/:id/update            		controllers.Node.update(repoId:String, id:String)
POST    /repo/:repoId/objects/:id/update-permission  		controllers.Node.updatePermission(repoId:String, id:String)
POST    /repo/:repoId/objects/:id/upload            		controllers.Node.upload(repoId:String, id:String)
POST    /repo/:repoId/objects/:id/checkout          		controllers.Node.checkOut(repoId:String, id:String)
POST    /repo/:repoId/objects/checkout          			controllers.Node.checkOutByBatch(repoId:String, ids:java.util.List[String])
POST    /repo/:repoId/objects/:id/checkin-pwc           	controllers.Node.checkInPWC(repoId:String, id:String)
POST    /repo/:repoId/objects/checkin-pwc           		controllers.Node.checkInPWCByBatch(repoId:String,  ids:java.util.List[String])
POST    /repo/:repoId/objects/:id/checkin           		controllers.Node.checkIn(repoId:String, id:String)
POST    /repo/:repoId/objects/:id/cancel-checkout   		controllers.Node.cancelCheckOut(repoId:String, id:String)
POST    /repo/:repoId/objects/cancel-checkout   			controllers.Node.cancelCheckOutByBatch(repoId:String, ids:java.util.List[String])

DELETE 	/repo/:repoId/objects/:id							controllers.Node.delete(repoId:String, id:String)
DELETE 	/repo/:repoId/objects/								controllers.Node.deleteByBatch(repoId:String, ids:java.util.List[String])
GET		/repo/:repoId/compressed-relation-file/:id/   		controllers.Node.downloadWithRelationTargetAsCompressedFile(repoId:String, id:String)
GET		/repo/:repoId/compressed-file/:id/   				controllers.Node.downloadAsCompressedFile(repoId:String, id:String)
GET     /repo/:repoId/compressed-file  						controllers.Node.downloadAsCompressedFileByBatch(repoId:String, ids:java.util.List[String])


# Archive API
GET		/repo/:repoId/archives								controllers.Archive.index(repoId:String, page:Integer ?= 1)
PUT		/repo/:repoId/archives/:archiveId/restore			controllers.Archive.restore(repoId:String, archiveId:String)
DELETE	/repo/:repoId/archives/:archiveId					controllers.Archive.destroy(repoId:String, archiveId:String)

# User API
GET     /repo/:repoId/users               					controllers.User.index(repoId:String)
GET		/repo/:repoId/users/search							controllers.User.search(repoId:String, term: String ?= "")
GET     /repo/:repoId/users/new               				controllers.User.showBlank(repoId:String)
POST	/repo/:repoId/users/create							controllers.User.create(repoId:String)
GET		/repo/:repoId/users/:id								controllers.User.showDetail(repoId:String, id:String)
GET		/repo/:repoId/users/:id/password					controllers.User.showPasswordChanger(repoId:String, id:String)
POST	/repo/:repoId/users/:id/update						controllers.User.update(repoId:String, id:String)
POST	/repo/:repoId/users/:id/changePassword				controllers.User.changePassword(repoId:String, id:String)
POST	/repo/:repoId/users/:id/delete						controllers.User.delete(repoId:String, id:String)
GET     /repo/:repoId/users/:id/favorites           		controllers.User.showFavorites(repoId:String, id:String)
PUT		/repo/:repoId/users/:userId/favorites/:objectId		controllers.User.toggleFavorite(repoId:String, userId:String, objectId:String)

# Group API
GET		/repo/:repoId/groups								controllers.Group.index(repoId:String)
GET		/repo/:repoId/groups/search							controllers.Group.search(repoId:String, term:String ?= "")
GET		/repo/:repoId/groups/new							controllers.Group.showBlank(repoId:String)
POST	/repo/:repoId/groups/create							controllers.Group.create(repoId:String)
GET		/repo/:repoId/groups/:id							controllers.Group.showDetail(repoId:String, id:String)
POST	/repo/:repoId/groups/:id/update						controllers.Group.update(repoId:String, id:String)
POST	/repo/:repoId/groups/:id/delete						controllers.Group.delete(repoId:String, id:String)

# Principal API
GET		/repo/:repoId/principals/search						controllers.Principal.search(repoId:String, term:String ?= "", groupId:String ?= "")

# Search engine API
GET		/repo/:repoId/search-engine							controllers.SearchEngine.index(repoId:String)
GET		/repo/:repoId/search-engine/init					controllers.SearchEngine.init(repoId:String)
GET		/repo/:repoId/search-engine/reindex					controllers.SearchEngine.reindex(repoId:String)

# ObjectType API
GET		/repo/:repoId/types									controllers.Type.index(repoId:String)
GET		/repo/:repoId/types/:id/download					controllers.Type.download(repoId:String, id:String)
GET		/repo/:repoId/types/new								controllers.Type.showBlank(repoId:String)
POST	/repo/:repoId/types/create							controllers.Type.create(repoId:String)
GET		/repo/:repoId/types/edit							controllers.Type.edit(repoId:String)
POST	/repo/:repoId/types/update							controllers.Type.update(repoId:String)
POST	/repo/:repoId/types/:id/delete						controllers.Type.delete(repoId:String, id:String)

# Config API
GET		/repo/:repoId/configs								controllers.Config.index(repoId:String)
GET		/repo/:repoId/configs/:key							controllers.Config.showDetail(repoId:String, key:String)
PUT		/repo/:repoId/configs/:key				    		controllers.Config.update(repoId:String, key:String)


# Javascript scala template API
GET		/jstemplate/duplicateNameCheck.js					controllers.JsTemplate.duplicateNameCheck(repoId:String)

